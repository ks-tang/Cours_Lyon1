{
	"info": {
		"_postman_id": "99282321-85ba-4237-9dd9-47d3bd2f9d4c",
		"name": "Chatons-M1IF03-2022_Q3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Input = form data / output = HTML",
			"item": [
				{
					"name": "users - www-form-urlencoded",
					"item": [
						{
							"name": "Create user by POST",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Location header is present\", function () {\r",
											"    pm.response.to.have.header(\"Location\");\r",
											"});\r",
											"pm.test(\"Location to contain users/\" + pm.variables.get(\"userId\"), function () {\r",
											"    pm.expect(pm.response.headers.get(\"Location\")).to.have.string(\"users/\" + pm.collectionVariables.get(\"userId\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"userId\", \"toto\");\r",
											"pm.collectionVariables.set(\"userPassword\", \"passwordToto\");\r",
											"pm.collectionVariables.set(\"userName\", \"Toto\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "login",
											"value": "{{userId}}",
											"type": "default"
										},
										{
											"key": "name",
											"value": "{{userName}}",
											"type": "default"
										},
										{
											"key": "password",
											"value": "{{userPassword}}",
											"type": "default"
										}
									],
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET all users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is HTML\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"text/html\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"userId\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/html",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Authorization header is present\", function () {\r",
											"    pm.response.to.have.header(\"Authorization\");\r",
											"});\r",
											"\r",
											"var token = pm.response.headers.get(\"Authorization\");\r",
											"if(token != null && token.startsWith(\"Bearer \")) {\r",
											"    token = token.substring(7);\r",
											"}\r",
											"\r",
											"pm.collectionVariables.set(\"token\", token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "login",
											"value": "{{userId}}",
											"type": "default"
										},
										{
											"key": "password",
											"value": "{{userPassword}}",
											"type": "default"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create user by PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Location header is present\", function () {\r",
											"    pm.response.to.have.header(\"Location\");\r",
											"});\r",
											"pm.test(\"Location to contain users/titi\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Location\")).to.have.string(\"users/titi\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "Titi",
											"type": "default"
										},
										{
											"key": "password",
											"value": "test",
											"type": "default"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/users/titi",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"titi"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET user name created by PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is HTML\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"text/html\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.contain(\"Titi\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/html",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/titi/name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"titi",
										"name"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET user created by PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"postman.setNextRequest(\"Create salon\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/html",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/titi",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"titi"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is HTML\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"text/html\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains user's name\", function () {\r",
											"    pm.expect(pm.response.text()).to.contain(pm.collectionVariables.get(\"userName\"));\r",
											"});\r",
											"pm.test(\"Body contains user's salon URL\", function () {\r",
											"    pm.expect(pm.response.text()).to.contain(pm.collectionVariables.get(\"salonId\"));\r",
											"});\r",
											"pm.test(\"Body contains user's message URL\", function () {\r",
											"    pm.expect(pm.response.text()).to.contain(pm.collectionVariables.get(\"messageUrl\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/html",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/{{userId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET user's name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is HTML\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"text/html\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches user name\", function () {\r",
											"    pm.expect(pm.response.text()).to.contain(pm.collectionVariables.get(\"userName\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/html",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/{{userId}}/name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{userId}}",
										"name"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET user's owned salons",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is HTML\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"text/html\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches salon URL\", function () {\r",
											"    pm.expect(pm.response.text()).to.contain(pm.collectionVariables.get(\"salonUrl\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/html",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/{{userId}}/ownedSalons",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{userId}}",
										"ownedSalons"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET user's memberOf salons",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is HTML\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"text/html\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains salon member\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"userId\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/html",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/{{userId}}/memberOfSalons",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{userId}}",
										"memberOfSalons"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET user's authored messages",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is HTML\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"text/html\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains message URL\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"messageUrl\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/html",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/{{userId}}/createdMessages",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{userId}}",
										"createdMessages"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET user's owned salon list subresource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 302\", function () {\r",
											"    pm.response.to.have.status(302);\r",
											"});\r",
											"pm.test(\"Location header is present\", function () {\r",
											"    pm.response.to.have.header(\"Location\");\r",
											"});\r",
											"pm.test(\"Location to contain salons/tralala\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Location\")).to.have.string(\"salons/tralala\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/html",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/{{userId}}/ownedSalons/tralala",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{userId}}",
										"ownedSalons",
										"tralala"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET user's memberOf salon list subresource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 302\", function () {\r",
											"    pm.response.to.have.status(302);\r",
											"});\r",
											"pm.test(\"Location header is present\", function () {\r",
											"    pm.response.to.have.header(\"Location\");\r",
											"});\r",
											"pm.test(\"Location to contain salons/prop1/prop2\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Location\")).to.have.string(\"salons/prop1/prop2\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/html",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/{{userId}}/memberOfSalons/prop1/prop2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{userId}}",
										"memberOfSalons",
										"prop1",
										"prop2"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET user's created message list subresource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 302\", function () {\r",
											"    pm.response.to.have.status(302);\r",
											"});\r",
											"pm.test(\"Location header is present\", function () {\r",
											"    pm.response.to.have.header(\"Location\");\r",
											"});\r",
											"pm.test(\"Location to contain messages/152/texte\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Location\")).to.have.string(\"messages/152/text\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/html",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/{{userId}}/createdMessages/152/text",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{userId}}",
										"createdMessages",
										"152",
										"text"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"userName\", \"Tototo\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "{{userName}}",
											"type": "default"
										}
									],
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/{{userId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET user after update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is HTML\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"text/html\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.contain(pm.collectionVariables.get(\"userName\"));\r",
											"});\r",
											"\r",
											"postman.setNextRequest(\"GET salon\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/html",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/{{userId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user created by PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/titi",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"titi"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET user name created by PUT after DELETE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/html",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/titi/name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"titi",
										"name"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/{{userId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET all users after DELETE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is HTML\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"text/html\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body does not contain user id\", function () {\r",
											"    pm.expect(pm.response.text()).not.to.include(pm.collectionVariables.get(\"userId\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/html",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout - form-data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "login",
											"value": "{{userId}}",
											"type": "default"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/users/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"logout"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET user after logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"postman.setNextRequest(\"GET all salons after logout\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/html",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/{{userId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{userId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Salons - www-form-urlencoded",
					"item": [
						{
							"name": "Create salon",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Location header is present\", function () {\r",
											"    pm.response.to.have.header(\"Location\");\r",
											"    pm.collectionVariables.set(\"salonUrl\", pm.response.headers.get(\"Location\"));\r",
											"});\r",
											"pm.test(\"Location header is correctly formatted\", function() {\r",
											"    var location = pm.response.headers.get(\"Location\").split(\"/\");\r",
											"    pm.expect(location.size).not.to.eql(0);\r",
											"    pm.collectionVariables.set(\"salonId\", location[location.length - 1]);\r",
											"});\r",
											"\r",
											"pm.test(\"Authorization header is present\", function () {\r",
											"    pm.response.to.have.header(\"Authorization\");\r",
											"});\r",
											"\r",
											"var token = pm.response.headers.get(\"Authorization\");\r",
											"if(token != null) {\r",
											"    if(token.startsWith(\"Bearer \")) {\r",
											"        token = token.substring(7);\r",
											"    }\r",
											"\r",
											"    pm.collectionVariables.set(\"token\", token);\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"salonName\", \"Mon beau salon\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "owner",
											"value": "{{userId}}",
											"type": "default"
										},
										{
											"key": "name",
											"value": "{{salonName}}",
											"type": "default"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/salons",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"salons"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET all salons",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is HTML\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"text/html\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"salonUrl\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/html",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/salons",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"salons"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET salon from non member",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/html",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/salons/{{salonId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"salons",
										"{{salonId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add member",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"    pm.collectionVariables.set(\"salonMember\", pm.collectionVariables.get(\"userId\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Authorization header is present\", function () {\r",
											"    pm.response.to.have.header(\"Authorization\");\r",
											"});\r",
											"\r",
											"var token = pm.response.headers.get(\"Authorization\");\r",
											"if(token != null) {\r",
											"    if(token.startsWith(\"Bearer \")) {\r",
											"        token = token.substring(7);\r",
											"    }\r",
											"\r",
											"    pm.collectionVariables.set(\"token\", token);\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "user",
											"value": "{{userId}}",
											"type": "default"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/salons/{{salonId}}/members",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"salons",
										"{{salonId}}",
										"members"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add second member",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"postman.setNextRequest(\"Create message\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "user",
											"value": "titi",
											"type": "default"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/salons/{{salonId}}/members",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"salons",
										"{{salonId}}",
										"members"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET salon",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is HTML\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"text/html\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains salon name\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"salonName\"));\r",
											"});\r",
											"pm.test(\"Body contains salon owner\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"userId\"));\r",
											"});\r",
											"pm.test(\"Body contains salon member\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"userId\"));\r",
											"});\r",
											"pm.test(\"Body contains message URL\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"messageUrl\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains second salon member\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"titi\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/html",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/salons/{{salonId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"salons",
										"{{salonId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET salon content",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is HTML\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"text/html\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains salon name\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"salonName\"));\r",
											"});\r",
											"pm.test(\"Body contains message text\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"messageText\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/html",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/salons/{{salonId}}/content",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"salons",
										"{{salonId}}",
										"content"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET salon name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is HTML\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"text/html\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains salon nom\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"salonName\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/html",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/salons/{{salonId}}/name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"salons",
										"{{salonId}}",
										"name"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET salon owner",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is HTML\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"text/html\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains salon owner\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"userId\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/html",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/salons/{{salonId}}/owner",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"salons",
										"{{salonId}}",
										"owner"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET salon members",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is HTML\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"text/html\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains salon member\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"userId\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/html",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/salons/{{salonId}}/members",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"salons",
										"{{salonId}}",
										"members"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET salon messages",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is HTML\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"text/html\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains message id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"messageId\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/html",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/salons/{{salonId}}/messages",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"salons",
										"{{salonId}}",
										"messages"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET salon owner nom",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 302\", function () {\r",
											"    pm.response.to.have.status(302);\r",
											"});\r",
											"pm.test(\"Location header is present\", function () {\r",
											"    pm.response.to.have.header(\"Location\");\r",
											"});\r",
											"pm.test(\"Location to contain users/{:ownerId}/name\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Location\")).to.have.string(\"users/\" + pm.collectionVariables.get(\"userId\") + \"/name\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/html",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/salons/{{salonId}}/owner/name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"salons",
										"{{salonId}}",
										"owner",
										"name"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET salon members nom",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 302\", function () {\r",
											"    pm.response.to.have.status(302);\r",
											"});\r",
											"pm.test(\"Location header is present\", function () {\r",
											"    pm.response.to.have.header(\"Location\");\r",
											"});\r",
											"pm.test(\"Location to contain users/{:userId}/name\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Location\")).to.have.string(\"users/\" + pm.collectionVariables.get(\"userId\") + \"/name\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/html",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/salons/{{salonId}}/members/{{userId}}/name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"salons",
										"{{salonId}}",
										"members",
										"{{userId}}",
										"name"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET salon message texte",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 302\", function () {\r",
											"    pm.response.to.have.status(302);\r",
											"});\r",
											"pm.test(\"Location header is present\", function () {\r",
											"    pm.response.to.have.header(\"Location\");\r",
											"});\r",
											"pm.test(\"Location to contain messages/0/text\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Location\")).to.have.string(\"messages/0/text\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/html",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/salons/{{salonId}}/messages/0/text",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"salons",
										"{{salonId}}",
										"messages",
										"0",
										"text"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update salon",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"postman.setNextRequest(\"GET all messages\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"salonName\", \"Mon TRES beau salon\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "{{salonName}}",
											"type": "default"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/salons/{{salonId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"salons",
										"{{salonId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET salon after Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is HTML\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"text/html\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains salon name\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"salonName\"));\r",
											"});\r",
											"\r",
											"postman.setNextRequest(\"GET all messages\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/html",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/salons/{{salonId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"salons",
										"{{salonId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete member",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Authorization header is present\", function () {\r",
											"    pm.response.to.have.header(\"Authorization\");\r",
											"});\r",
											"\r",
											"var token = pm.response.headers.get(\"Authorization\");\r",
											"if(token != null) {\r",
											"    if(token.startsWith(\"Bearer \")) {\r",
											"        token = token.substring(7);\r",
											"    }\r",
											"\r",
											"    pm.collectionVariables.set(\"token\", token);\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{baseUrl}}/salons/{{salonId}}/members?user=titi",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"salons",
										"{{salonId}}",
										"members"
									],
									"query": [
										{
											"key": "user",
											"value": "titi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET salon members after delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is HTML\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"text/html\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body does not contains salon member\", function () {\r",
											"    pm.expect(pm.response.text()).not.to.include(\"titi\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/html",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/salons/{{salonId}}/members",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"salons",
										"{{salonId}}",
										"members"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete salon",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Authorization header is present\", function () {\r",
											"    pm.response.to.have.header(\"Authorization\");\r",
											"});\r",
											"\r",
											"var token = pm.response.headers.get(\"Authorization\");\r",
											"if(token != null) {\r",
											"    if(token.startsWith(\"Bearer \")) {\r",
											"        token = token.substring(7);\r",
											"    }\r",
											"\r",
											"    pm.collectionVariables.set(\"token\", token);\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/salons/{{salonId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"salons",
										"{{salonId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET all salons after delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is HTML\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"text/html\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body does not contain salon id\", function () {\r",
											"    pm.expect(pm.response.text()).not.to.include(pm.collectionVariables.get(\"salonUrl\"));\r",
											"});\r",
											"\r",
											"postman.setNextRequest(\"Delete user created by PUT\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/html",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/salons",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"salons"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET all salons after logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"postman.setNextRequest(\"GET all messages after logout\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/html",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/salons",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"salons"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Messages - www-form-urlencoded",
					"item": [
						{
							"name": "Create message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Location header is present\", function () {\r",
											"    pm.response.to.have.header(\"Location\");\r",
											"    pm.collectionVariables.set(\"messageUrl\", pm.response.headers.get(\"Location\"));\r",
											"});\r",
											"pm.test(\"Location header is correctly formatted\", function() {\r",
											"    var location = pm.response.headers.get(\"Location\").split(\"/\");\r",
											"    pm.expect(location.size).not.to.eql(0);\r",
											"    pm.collectionVariables.set(\"messageId\", location[location.length - 1]);\r",
											"});\r",
											"\r",
											"postman.setNextRequest(\"GET user\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"messageText\", \"Ah que coucou !\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "author",
											"value": "{{userId}}",
											"type": "default"
										},
										{
											"key": "salon",
											"value": "{{salonId}}",
											"type": "default"
										},
										{
											"key": "text",
											"value": "{{messageText}}",
											"type": "default"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/messages",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"messages"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET all messages",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is HTML\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"text/html\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"messageUrl\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/html",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/messages",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"messages"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is HTML\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"text/html\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches message salon\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"salonId\"));\r",
											"});\r",
											"pm.test(\"Body matches message author\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"userId\"));\r",
											"});\r",
											"pm.test(\"Body matches message text\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"messageText\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/html",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/messages/{{messageId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"messages",
										"{{messageId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET message author",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is HTML\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"text/html\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches message author\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"userId\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/html",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/messages/{{messageId}}/author",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"messages",
										"{{messageId}}",
										"author"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET message salon",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is HTML\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"text/html\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches message salon\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"salonId\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/html",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/messages/{{messageId}}/salon",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"messages",
										"{{messageId}}",
										"salon"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET message text",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is HTML\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"text/html\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches message text\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"messageText\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/html",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/messages/{{messageId}}/text",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"messages",
										"{{messageId}}",
										"text"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET message author name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 302\", function () {\r",
											"    pm.response.to.have.status(302);\r",
											"});\r",
											"pm.test(\"Location header is present\", function () {\r",
											"    pm.response.to.have.header(\"Location\");\r",
											"});\r",
											"pm.test(\"Location to contain users/{:authorId}/name\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Location\")).to.have.string(\"users/\" + pm.collectionVariables.get(\"userId\") + \"/name\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/html",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/messages/{{messageId}}/author/name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"messages",
										"{{messageId}}",
										"author",
										"name"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET message salon name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 302\", function () {\r",
											"    pm.response.to.have.status(302);\r",
											"});\r",
											"pm.test(\"Location header is present\", function () {\r",
											"    pm.response.to.have.header(\"Location\");\r",
											"});\r",
											"pm.test(\"Location to contain salons/{:salonId}/name\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Location\")).to.have.string(\"salons/\" + pm.collectionVariables.get(\"salonId\") + \"/name\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/html",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/messages/{{messageId}}/salon/name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"messages",
										"{{messageId}}",
										"salon",
										"name"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"messageText\", \"Waaaarf !!!\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "text",
											"value": "{{messageText}}",
											"type": "default"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/messages/{{messageId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"messages",
										"{{messageId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET message after update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is HTML\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"text/html\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches message text\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"messageText\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/html",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/messages/{{messageId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"messages",
										"{{messageId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"pm.collectionVariables.set(\"messageId\", pm.collectionVariables.get(\"messageId\") - 1);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/messages/{{messageId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"messages",
										"{{messageId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET all messages after delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is HTML\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"text/html\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body does not contain message id\", function () {\r",
											"    pm.expect(pm.response.text()).not.to.include(pm.collectionVariables.get(\"messageUrl\"));\r",
											"});\r",
											"\r",
											"postman.setNextRequest(\"Delete member\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/html",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/messages",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"messages"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET all messages after logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/html",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/messages",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"messages"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Input = JSON / output = JSON",
			"item": [
				{
					"name": "Users - JSON",
					"item": [
						{
							"name": "Create user by POST - JSON",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Location header is present\", function () {\r",
											"    pm.response.to.have.header(\"Location\");\r",
											"});\r",
											"pm.test(\"Location to contain users/\" + pm.variables.get(\"userId\"), function () {\r",
											"    pm.expect(pm.response.headers.get(\"Location\")).to.have.string(\"users/\" + pm.collectionVariables.get(\"userId\"));\r",
											"    pm.collectionVariables.set(\"userUrl\", pm.response.headers.get(\"Location\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"userId\", \"tutu\");\r",
											"pm.collectionVariables.set(\"userPassword\", \"passwordTutu\");\r",
											"pm.collectionVariables.set(\"userName\", \"Tutu\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"login\": \"{{userId}}\",\r\n  \"password\": \"{{userPassword}}\",\r\n  \"name\": \"{{userName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET all users - JSON",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");\r",
											"});\r",
											"\r",
											"var jsonData = null;\r",
											"\r",
											"pm.test(\"Body is valid JSON data\", function () {\r",
											"    pm.expect(() => pm.response.json()).to.not.throw();\r",
											"    jsonData = pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Body is a JSON array\", function () {\r",
											"    pm.expect(jsonData).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"pm.test(\"JSON body contains user id\", function () {\r",
											"    pm.expect(jsonData.includes(pm.collectionVariables.get(\"userUrl\"))).to.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login - JSON",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Authorization header is present\", function () {\r",
											"    pm.response.to.have.header(\"Authorization\");\r",
											"});\r",
											"\r",
											"var token = pm.response.headers.get(\"Authorization\");\r",
											"if(token != null && token.startsWith(\"Bearer \")) {\r",
											"    token = token.substring(7);\r",
											"}\r",
											"\r",
											"pm.collectionVariables.set(\"token\", token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"login\": \"{{userId}}\",\r\n  \"password\": \"{{userPassword}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create user by PUT - JSON",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Location header is present\", function () {\r",
											"    pm.response.to.have.header(\"Location\");\r",
											"});\r",
											"pm.test(\"Location to contain users/titi\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Location\")).to.have.string(\"users/titi\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"test\",\r\n  \"name\": \"Titi\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/titi",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"titi"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET user name created by PUT - JSON",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");\r",
											"});\r",
											"\r",
											"var jsonData = null;\r",
											"\r",
											"pm.test(\"Body is valid JSON data\", function () {\r",
											"    pm.expect(() => pm.response.json()).to.not.throw();\r",
											"    jsonData = pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(jsonData.name).to.eql(\"Titi\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/titi/name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"titi",
										"name"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET user created by PUT - JSON",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"postman.setNextRequest(\"Create salon - JSON\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/titi",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"titi"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET user - JSON",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");\r",
											"});\r",
											"\r",
											"var jsonData = null;\r",
											"\r",
											"pm.test(\"Body is valid JSON data\", function () {\r",
											"    pm.expect(() => pm.response.json()).to.not.throw();\r",
											"    jsonData = pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains user's name\", function () {\r",
											"    pm.expect(jsonData.name).to.eql(pm.collectionVariables.get(\"userName\"));\r",
											"});\r",
											"pm.test(\"Body contains user's created salon id\", function () {\r",
											"    pm.expect(jsonData.ownedSalons.includes(parseInt(pm.collectionVariables.get(\"salonId\")))).to.eql(true);\r",
											"});\r",
											"pm.test(\"Body contains user's memberOf salon id\", function () {\r",
											"    pm.expect(jsonData.memberOfSalons.includes(parseInt(pm.collectionVariables.get(\"salonId\")))).to.eql(true);\r",
											"});\r",
											"pm.test(\"Body contains user's message id\", function () {\r",
											"    pm.expect(jsonData.createdMessages.includes(parseInt(pm.collectionVariables.get(\"messageId\")))).to.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/{{userId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user - JSON",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"userName\", \"Tototo\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{userPassword}}\",\r\n  \"name\": \"{{userName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/{{userId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET user after update - JSON",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");\r",
											"});\r",
											"\r",
											"var jsonData = null;\r",
											"\r",
											"pm.test(\"Body is valid JSON data\", function () {\r",
											"    pm.expect(() => pm.response.json()).to.not.throw();\r",
											"    jsonData = pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains user's name\", function () {\r",
											"    pm.expect(jsonData.name).to.eql(pm.collectionVariables.get(\"userName\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/{{userId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user created by PUT - JSON",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/titi",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"titi"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET user name created by PUT after DELETE - JSON",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"postman.setNextRequest(\"GET salon - JSON\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/titi/name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"titi",
										"name"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user - JSON",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/tutu",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"tutu"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET all users after DELETE - JSON",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");\r",
											"});\r",
											"\r",
											"var jsonData = null;\r",
											"\r",
											"pm.test(\"Body is valid JSON data\", function () {\r",
											"    pm.expect(() => pm.response.json()).to.not.throw();\r",
											"    jsonData = pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Body does not contain user id\", function () {\r",
											"    pm.expect(jsonData.includes(pm.collectionVariables.get(\"userId\"))).to.eql(false);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout - JSON",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"login\": \"{{userId}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"logout"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET user after logout - JSON",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"postman.setNextRequest(\"Create user by POST - XML\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/{{userId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{userId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Salons - JSON",
					"item": [
						{
							"name": "Create salon - JSON",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Location header is present\", function () {\r",
											"    pm.response.to.have.header(\"Location\");\r",
											"    pm.collectionVariables.set(\"salonUrl\", pm.response.headers.get(\"Location\"));\r",
											"});\r",
											"pm.test(\"Location header is correctly formatted\", function() {\r",
											"    var location = pm.response.headers.get(\"Location\").split(\"/\");\r",
											"    pm.expect(location.size).not.to.eql(0);\r",
											"    pm.collectionVariables.set(\"salonId\", location[location.length - 1]);\r",
											"});\r",
											"\r",
											"pm.test(\"Authorization header is present\", function () {\r",
											"    pm.response.to.have.header(\"Authorization\");\r",
											"});\r",
											"\r",
											"var token = pm.response.headers.get(\"Authorization\");\r",
											"if(token != null) {\r",
											"    if(token.startsWith(\"Bearer \")) {\r",
											"        token = token.substring(7);\r",
											"    }\r",
											"\r",
											"    pm.collectionVariables.set(\"token\", token);\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"salonName\", \"Mon deuxième beau salon\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"owner\": \"{{userId}}\",\r\n  \"name\": \"{{salonName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/salons",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"salons"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET all salons - JSON",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");\r",
											"});\r",
											"\r",
											"var jsonData = null;\r",
											"\r",
											"pm.test(\"Body is valid JSON data\", function () {\r",
											"    pm.expect(() => pm.response.json()).to.not.throw();\r",
											"    jsonData = pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Body is a JSON array\", function () {\r",
											"    pm.expect(jsonData).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"pm.test(\"JSON body contains salon id\", function () {\r",
											"    pm.expect(jsonData.includes(pm.collectionVariables.get(\"salonUrl\"))).to.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/salons",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"salons"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add member - JSON",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"    pm.collectionVariables.set(\"salonMember\", pm.collectionVariables.get(\"userId\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Authorization header is present\", function () {\r",
											"    pm.response.to.have.header(\"Authorization\");\r",
											"});\r",
											"\r",
											"var token = pm.response.headers.get(\"Authorization\");\r",
											"if(token != null) {\r",
											"    if(token.startsWith(\"Bearer \")) {\r",
											"        token = token.substring(7);\r",
											"    }\r",
											"\r",
											"    pm.collectionVariables.set(\"token\", token);\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"user\": \"{{userId}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/salons/{{salonId}}/members",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"salons",
										"{{salonId}}",
										"members"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add second member - JSON",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"postman.setNextRequest(\"Create message - JSON\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"user\": \"titi\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/salons/{{salonId}}/members",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"salons",
										"{{salonId}}",
										"members"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET salon - JSON",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");\r",
											"});\r",
											"\r",
											"var jsonData = null;\r",
											"\r",
											"pm.test(\"Body is valid JSON data\", function () {\r",
											"    pm.expect(() => pm.response.json()).to.not.throw();\r",
											"    jsonData = pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains salon name\", function () {\r",
											"    pm.expect(jsonData.name).to.eql(pm.collectionVariables.get(\"salonName\"));\r",
											"});\r",
											"pm.test(\"Body contains salon owner\", function () {\r",
											"    pm.expect(jsonData.owner).to.eql(pm.collectionVariables.get(\"userId\"));\r",
											"});\r",
											"pm.test(\"Body contains salon member\", function () {\r",
											"    pm.expect(jsonData.members.includes(pm.collectionVariables.get(\"userId\"))).to.eql(true);\r",
											"});\r",
											"pm.test(\"Body contains message id\", function () {\r",
											"    pm.expect(jsonData.messages.includes(parseInt(pm.collectionVariables.get(\"messageId\")))).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains second salon member\", function () {\r",
											"    pm.expect(jsonData.members.includes(\"titi\")).to.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/salons/{{salonId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"salons",
										"{{salonId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update salon - JSON",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"salonName\", \"Mon TRES beau salon\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{salonName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/salons/{{salonId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"salons",
										"{{salonId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET salon after Update - JSON",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");\r",
											"});\r",
											"\r",
											"var jsonData = null;\r",
											"\r",
											"pm.test(\"Body is valid JSON data\", function () {\r",
											"    pm.expect(() => pm.response.json()).to.not.throw();\r",
											"    jsonData = pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains salon name\", function () {\r",
											"    pm.expect(jsonData.name).to.eql(pm.collectionVariables.get(\"salonName\"));\r",
											"});\r",
											"\r",
											"postman.setNextRequest(\"GET all messages - JSON\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/salons/{{salonId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"salons",
										"{{salonId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete member - JSON",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Authorization header is present\", function () {\r",
											"    pm.response.to.have.header(\"Authorization\");\r",
											"});\r",
											"\r",
											"var token = pm.response.headers.get(\"Authorization\");\r",
											"if(token != null) {\r",
											"    if(token.startsWith(\"Bearer \")) {\r",
											"        token = token.substring(7);\r",
											"    }\r",
											"\r",
											"    pm.collectionVariables.set(\"token\", token);\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{baseUrl}}/salons/{{salonId}}/members?user=titi",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"salons",
										"{{salonId}}",
										"members"
									],
									"query": [
										{
											"key": "user",
											"value": "titi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET salon members after delete - JSON",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");\r",
											"});\r",
											"\r",
											"var jsonData = null;\r",
											"\r",
											"pm.test(\"Body is valid JSON data\", function () {\r",
											"    pm.expect(() => pm.response.json()).to.not.throw();\r",
											"    jsonData = pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Body does not contains salon member\", function () {\r",
											"    pm.expect(jsonData.members.includes(\"titi\")).to.eql(false);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/salons/{{salonId}}/members",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"salons",
										"{{salonId}}",
										"members"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete salon - JSON",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Authorization header is present\", function () {\r",
											"    pm.response.to.have.header(\"Authorization\");\r",
											"});\r",
											"\r",
											"var token = pm.response.headers.get(\"Authorization\");\r",
											"if(token != null) {\r",
											"    if(token.startsWith(\"Bearer \")) {\r",
											"        token = token.substring(7);\r",
											"    }\r",
											"\r",
											"    pm.collectionVariables.set(\"token\", token);\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/salons/{{salonId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"salons",
										"{{salonId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET all salons after delete - JSON",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");\r",
											"});\r",
											"\r",
											"var jsonData = null;\r",
											"\r",
											"pm.test(\"Body is valid JSON data\", function () {\r",
											"    pm.expect(() => pm.response.json()).to.not.throw();\r",
											"    jsonData = pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Body does not contain salon id\", function () {\r",
											"    pm.expect(jsonData.includes(pm.collectionVariables.get(\"salonUrl\"))).to.eql(false);\r",
											"});\r",
											"\r",
											"postman.setNextRequest(\"Delete user - JSON\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/salons",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"salons"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Messages - JSON",
					"item": [
						{
							"name": "Create message - JSON",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Location header is present\", function () {\r",
											"    pm.response.to.have.header(\"Location\");\r",
											"    pm.collectionVariables.set(\"messageUrl\", pm.response.headers.get(\"Location\"));\r",
											"});\r",
											"pm.test(\"Location header is correctly formatted\", function() {\r",
											"    var location = pm.response.headers.get(\"Location\").split(\"/\");\r",
											"    pm.expect(location.size).not.to.eql(0);\r",
											"    pm.collectionVariables.set(\"messageId\", location[location.length - 1]);\r",
											"});\r",
											"\r",
											"postman.setNextRequest(\"GET user - JSON\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"messageText\", \"Ah que re-coucou !\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"author\": \"{{userId}}\",\r\n  \"salon\": \"{{salonId}}\",\r\n  \"text\": \"{{messageText}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/messages",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"messages"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET all messages - JSON",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");\r",
											"});\r",
											"\r",
											"var jsonData = null;\r",
											"\r",
											"pm.test(\"Body is valid JSON data\", function () {\r",
											"    pm.expect(() => pm.response.json()).to.not.throw();\r",
											"    jsonData = pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Body is a JSON array\", function () {\r",
											"    pm.expect(jsonData).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"pm.test(\"JSON body contains message id\", function () {\r",
											"    pm.expect(jsonData.includes(pm.collectionVariables.get(\"messageUrl\"))).to.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/messages",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"messages"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET message - JSON",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");\r",
											"});\r",
											"\r",
											"var jsonData = null;\r",
											"\r",
											"pm.test(\"Body is valid JSON data\", function () {\r",
											"    pm.expect(() => pm.response.json()).to.not.throw();\r",
											"    jsonData = pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches message salon\", function () {\r",
											"    pm.expect(jsonData.salon).to.eql(parseInt(pm.collectionVariables.get(\"salonId\")));\r",
											"});\r",
											"pm.test(\"Body matches message author\", function () {\r",
											"    pm.expect(jsonData.author).to.eql(pm.collectionVariables.get(\"userId\"));\r",
											"});\r",
											"pm.test(\"Body matches message text\", function () {\r",
											"    pm.expect(jsonData.text).to.eql(pm.collectionVariables.get(\"messageText\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/messages/{{messageId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"messages",
										"{{messageId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update message - JSON",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"messageText\", \"Re-Waaaarf !!!\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"text\": \"{{messageText}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/messages/{{messageId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"messages",
										"{{messageId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET message after update - JSON",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");\r",
											"});\r",
											"\r",
											"var jsonData = null;\r",
											"\r",
											"pm.test(\"Body is valid JSON data\", function () {\r",
											"    pm.expect(() => pm.response.json()).to.not.throw();\r",
											"    jsonData = pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches message text\", function () {\r",
											"    pm.expect(jsonData.text.includes(pm.collectionVariables.get(\"messageText\"))).to.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/messages/{{messageId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"messages",
										"{{messageId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete message - JSON",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"pm.collectionVariables.set(\"messageId\", pm.collectionVariables.get(\"messageId\") - 1);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/messages/{{messageId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"messages",
										"{{messageId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET all messages after delete - JSON",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");\r",
											"});\r",
											"\r",
											"var jsonData = null;\r",
											"\r",
											"pm.test(\"Body is valid JSON data\", function () {\r",
											"    pm.expect(() => pm.response.json()).to.not.throw();\r",
											"    jsonData = pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Body does not contain message id\", function () {\r",
											"    pm.expect(jsonData.includes(pm.collectionVariables.get(\"messageUrl\"))).to.eql(false);\r",
											"});\r",
											"\r",
											"postman.setNextRequest(\"Delete member - JSON\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/messages",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"messages"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Input = XML / output = XML",
			"item": [
				{
					"name": "Users - XML",
					"item": [
						{
							"name": "Create user by POST - XML",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Location header is present\", function () {\r",
											"    pm.response.to.have.header(\"Location\");\r",
											"});\r",
											"pm.test(\"Location to contain users/\" + pm.variables.get(\"userId\"), function () {\r",
											"    pm.expect(pm.response.headers.get(\"Location\")).to.have.string(\"users/\" + pm.collectionVariables.get(\"userId\"));\r",
											"    pm.collectionVariables.set(\"userUrl\", pm.response.headers.get(\"Location\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"userId\", \"tata\");\r",
											"pm.collectionVariables.set(\"userPassword\", \"passwordTata\");\r",
											"pm.collectionVariables.set(\"userName\", \"Tata\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<user>\r\n    <login>{{userId}}</login>\r\n    <password>{{userPassword}}</password>\r\n    <name>{{userName}}</name>\r\n</user>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET all users - XML",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is XML\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/xml\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body is valid XML data\", function () {\r",
											"    pm.expect(() => xml2Json(responseBody)).to.not.throw();\r",
											"});\r",
											"\r",
											"// Test \"mou\" (pas de test de la structure du XML généré pour les listes)\r",
											"pm.test(\"XML body contains user id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"userId\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login - XML",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Authorization header is present\", function () {\r",
											"    pm.response.to.have.header(\"Authorization\");\r",
											"});\r",
											"\r",
											"var token = pm.response.headers.get(\"Authorization\");\r",
											"if(token != null && token.startsWith(\"Bearer \")) {\r",
											"    token = token.substring(7);\r",
											"}\r",
											"\r",
											"pm.collectionVariables.set(\"token\", token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<user>\r\n    <login>{{userId}}</login>\r\n    <password>{{userPassword}}</password>\r\n</user>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create user by PUT - XML",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Location header is present\", function () {\r",
											"    pm.response.to.have.header(\"Location\");\r",
											"});\r",
											"pm.test(\"Location to contain users/titi\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Location\")).to.have.string(\"users/titi\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<user>\r\n    <password>test</password>\r\n    <name>Titi</name>\r\n</user>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/titi",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"titi"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET user name created by PUT - XML",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.contain(\"Titi\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/titi/name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"titi",
										"name"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET user created by PUT - XML",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"postman.setNextRequest(\"Create salon - XML\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/titi",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"titi"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET user - XML",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is XML\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/xml\");\r",
											"});\r",
											"\r",
											"var jsonData = null;\r",
											"\r",
											"pm.test(\"Body is valid XML data\", function () {\r",
											"    pm.expect(() => xml2Json(responseBody)).to.not.throw();\r",
											"    jsonData = xml2Json(responseBody).user;\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains user's name\", function () {\r",
											"    pm.expect(jsonData.name).to.eql(pm.collectionVariables.get(\"userName\"));\r",
											"});\r",
											"pm.test(\"Body contains user's created salon id\", function () {\r",
											"    pm.expect(JSON.stringify(jsonData.ownedSalons)).to.include(pm.collectionVariables.get(\"salonId\"));\r",
											"});\r",
											"pm.test(\"Body contains user's memberOf salon id\", function () {\r",
											"    pm.expect(JSON.stringify(jsonData.memberOfSalons)).to.include(parseInt(pm.collectionVariables.get(\"salonId\")));\r",
											"});\r",
											"pm.test(\"Body contains user's message id\", function () {\r",
											"    pm.expect(JSON.stringify(jsonData.createdMessages)).to.include(parseInt(pm.collectionVariables.get(\"messageId\")));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/{{userId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user - XML",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"userName\", \"Tototo\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<user>\r\n    <password>{{userPassword}}</password>\r\n    <name>{{userName}}</name>\r\n</user>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/{{userId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET user after update - XML",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is XML\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/xml\");\r",
											"});\r",
											"\r",
											"var jsonData = null;\r",
											"\r",
											"pm.test(\"Body is valid XML data\", function () {\r",
											"    pm.expect(() => xml2Json(responseBody)).to.not.throw();\r",
											"    jsonData = xml2Json(responseBody).user;\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(jsonData.name).to.eql(pm.collectionVariables.get(\"userName\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/{{userId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user created by PUT - XML",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/titi",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"titi"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET user name created by PUT after DELETE - XML",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"postman.setNextRequest(\"GET salon - XML\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/titi/name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"titi",
										"name"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user - XML",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/{{userId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET all users after DELETE - XML",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is XML\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/xml\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body is valid XML data\", function () {\r",
											"    pm.expect(() => xml2Json(responseBody)).to.not.throw();\r",
											"});\r",
											"\r",
											"pm.test(\"Body does not contain user id\", function () {\r",
											"    pm.expect(pm.response.text()).not.to.include(pm.collectionVariables.get(\"userId\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout - XML",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<user>\r\n    <login>{{userId}}</login>\r\n</user>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"logout"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET user after logout - XML",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"postman.setNextRequest(null);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/{{userId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{userId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Salons - XML",
					"item": [
						{
							"name": "Create salon - XML",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Location header is present\", function () {\r",
											"    pm.response.to.have.header(\"Location\");\r",
											"    pm.collectionVariables.set(\"salonUrl\", pm.response.headers.get(\"Location\"));\r",
											"});\r",
											"pm.test(\"Location header is correctly formatted\", function() {\r",
											"    var location = pm.response.headers.get(\"Location\").split(\"/\");\r",
											"    pm.expect(location.size).not.to.eql(0);\r",
											"    pm.collectionVariables.set(\"salonId\", location[location.length - 1]);\r",
											"});\r",
											"\r",
											"pm.test(\"Authorization header is present\", function () {\r",
											"    pm.response.to.have.header(\"Authorization\");\r",
											"});\r",
											"\r",
											"var token = pm.response.headers.get(\"Authorization\");\r",
											"if(token != null) {\r",
											"    if(token.startsWith(\"Bearer \")) {\r",
											"        token = token.substring(7);\r",
											"    }\r",
											"\r",
											"    pm.collectionVariables.set(\"token\", token);\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"salonName\", \"Mon deuxième beau salon\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<salon>\r\n    <owner>{{userId}}</owner>\r\n    <name>{{salonName}}</name>\r\n</salon>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/salons",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"salons"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET all salons - XML",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is XML\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/xml\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body is valid XML data\", function () {\r",
											"    pm.expect(() => xml2Json(responseBody)).to.not.throw();\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"salonUrl\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/salons",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"salons"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add member - XML",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"    pm.collectionVariables.set(\"salonMember\", pm.collectionVariables.get(\"userId\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Authorization header is present\", function () {\r",
											"    pm.response.to.have.header(\"Authorization\");\r",
											"});\r",
											"\r",
											"var token = pm.response.headers.get(\"Authorization\");\r",
											"if(token != null) {\r",
											"    if(token.startsWith(\"Bearer \")) {\r",
											"        token = token.substring(7);\r",
											"    }\r",
											"\r",
											"    pm.collectionVariables.set(\"token\", token);\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<member>\r\n    <user>{{userId}}</user>\r\n</member>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/salons/{{salonId}}/members",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"salons",
										"{{salonId}}",
										"members"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add second member - XML",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"postman.setNextRequest(\"Create message - XML\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<member>\r\n    <user>titi</user>\r\n</member>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/salons/{{salonId}}/members",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"salons",
										"{{salonId}}",
										"members"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET salon - XML",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is XML\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/xml\");\r",
											"});\r",
											"\r",
											"var jsonData = null;\r",
											"\r",
											"pm.test(\"Body is valid XML data\", function () {\r",
											"    pm.expect(() => xml2Json(responseBody)).to.not.throw();\r",
											"    jsonData = xml2Json(responseBody).salon;\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains salon name\", function () {\r",
											"    pm.expect(jsonData.name).to.eql(pm.collectionVariables.get(\"salonName\"));\r",
											"});\r",
											"pm.test(\"Body contains salon owner\", function () {\r",
											"    pm.expect(jsonData.owner).to.eql(pm.collectionVariables.get(\"userId\"));\r",
											"});\r",
											"pm.test(\"Body contains salon member\", function () {\r",
											"    pm.expect(JSON.stringify(jsonData.members)).to.include(pm.collectionVariables.get(\"userId\"));\r",
											"});\r",
											"pm.test(\"Body contains message id\", function () {\r",
											"    pm.expect(JSON.stringify(jsonData.messages)).to.include(pm.collectionVariables.get(\"messageId\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains second salon member\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"titi\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/salons/{{salonId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"salons",
										"{{salonId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update salon - XML",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"salonName\", \"Mon TRES beau salon\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<salon>\r\n    <name>{{salonName}}</name>\r\n</salon>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/salons/{{salonId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"salons",
										"{{salonId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET salon after Update - XML",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is XML\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/xml\");\r",
											"});\r",
											"\r",
											"var jsonData = null;\r",
											"\r",
											"pm.test(\"Body is valid XML data\", function () {\r",
											"    pm.expect(() => xml2Json(responseBody)).to.not.throw();\r",
											"    jsonData = xml2Json(responseBody).salon;\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains salon name\", function () {\r",
											"    pm.expect(jsonData.name).to.eql(pm.collectionVariables.get(\"salonName\"));\r",
											"});\r",
											"\r",
											"postman.setNextRequest(\"GET all messages - XML\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/salons/{{salonId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"salons",
										"{{salonId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete member - XML",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Authorization header is present\", function () {\r",
											"    pm.response.to.have.header(\"Authorization\");\r",
											"});\r",
											"\r",
											"var token = pm.response.headers.get(\"Authorization\");\r",
											"if(token != null) {\r",
											"    if(token.startsWith(\"Bearer \")) {\r",
											"        token = token.substring(7);\r",
											"    }\r",
											"\r",
											"    pm.collectionVariables.set(\"token\", token);\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{baseUrl}}/salons/{{salonId}}/members?user=titi",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"salons",
										"{{salonId}}",
										"members"
									],
									"query": [
										{
											"key": "user",
											"value": "titi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET salon members after delete - XML",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is XML\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/xml\");\r",
											"});\r",
											"\r",
											"var jsonData = null;\r",
											"\r",
											"pm.test(\"Body is valid XML data\", function () {\r",
											"    pm.expect(() => xml2Json(responseBody)).to.not.throw();\r",
											"    jsonData = xml2Json(responseBody).salon;\r",
											"});\r",
											"\r",
											"pm.test(\"Body does not contains salon member\", function () {\r",
											"    pm.expect(pm.response.text()).not.to.include(\"titi\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/salons/{{salonId}}/members",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"salons",
										"{{salonId}}",
										"members"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete salon - XML",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Authorization header is present\", function () {\r",
											"    pm.response.to.have.header(\"Authorization\");\r",
											"});\r",
											"\r",
											"var token = pm.response.headers.get(\"Authorization\");\r",
											"if(token != null) {\r",
											"    if(token.startsWith(\"Bearer \")) {\r",
											"        token = token.substring(7);\r",
											"    }\r",
											"\r",
											"    pm.collectionVariables.set(\"token\", token);\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/salons/{{salonId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"salons",
										"{{salonId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET all salons after delete - XML",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is XML\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/xml\");\r",
											"});\r",
											"\r",
											"var jsonData = null;\r",
											"\r",
											"pm.test(\"Body is valid XML data\", function () {\r",
											"    pm.expect(() => xml2Json(responseBody)).to.not.throw();\r",
											"    jsonData = xml2Json(responseBody).salon;\r",
											"});\r",
											"\r",
											"pm.test(\"Body does not contain salon id\", function () {\r",
											"    pm.expect(pm.response.text()).not.to.include(pm.collectionVariables.get(\"salonUrl\"));\r",
											"});\r",
											"\r",
											"postman.setNextRequest(\"Delete user - XML\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/salons",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"salons"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Messages - XML",
					"item": [
						{
							"name": "Create message - XML",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Location header is present\", function () {\r",
											"    pm.response.to.have.header(\"Location\");\r",
											"    pm.collectionVariables.set(\"messageUrl\", pm.response.headers.get(\"Location\"));\r",
											"});\r",
											"pm.test(\"Location header is correctly formatted\", function() {\r",
											"    var location = pm.response.headers.get(\"Location\").split(\"/\");\r",
											"    pm.expect(location.size).not.to.eql(0);\r",
											"    pm.collectionVariables.set(\"messageId\", location[location.length - 1]);\r",
											"});\r",
											"\r",
											"postman.setNextRequest(\"GET user - XML\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"messageText\", \"Ah que re-re-coucou !\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<message>\r\n    <author>{{userId}}</author>\r\n    <salon>{{salonId}}</salon>\r\n    <text>{{messageText}}</text>\r\n</message>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/messages",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"messages"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET all messages - XML",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is XML\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/xml\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body is valid XML data\", function () {\r",
											"    pm.expect(() => xml2Json(responseBody)).to.not.throw();\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"messageUrl\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/messages",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"messages"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET message - XML",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is XML\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/xml\");\r",
											"});\r",
											"\r",
											"var jsonData = null;\r",
											"\r",
											"pm.test(\"Body is valid XML data\", function () {\r",
											"    pm.expect(() => xml2Json(responseBody)).to.not.throw();\r",
											"    jsonData = xml2Json(responseBody).message;\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches message salon\", function () {\r",
											"    pm.expect(jsonData.salon).to.eql(pm.collectionVariables.get(\"salonId\"));\r",
											"});\r",
											"pm.test(\"Body matches message author\", function () {\r",
											"    pm.expect(jsonData.author).to.eql(pm.collectionVariables.get(\"userId\"));\r",
											"});\r",
											"pm.test(\"Body matches message text\", function () {\r",
											"    pm.expect(jsonData.text).to.eql(pm.collectionVariables.get(\"messageText\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/messages/{{messageId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"messages",
										"{{messageId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update message - XML",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"messageText\", \"Re-Re-Waaaarf !!!\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<message>\r\n    <text>{{messageText}}</text>\r\n</message>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/messages/{{messageId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"messages",
										"{{messageId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET message after update - XML",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is XML\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/xml\");\r",
											"});\r",
											"\r",
											"var jsonData = null;\r",
											"\r",
											"pm.test(\"Body is valid XML data\", function () {\r",
											"    pm.expect(() => xml2Json(responseBody)).to.not.throw();\r",
											"    jsonData = xml2Json(responseBody).message;\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches message text\", function () {\r",
											"    pm.expect(jsonData.text).to.eql(pm.collectionVariables.get(\"messageText\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/messages/{{messageId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"messages",
										"{{messageId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete message - XML",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"pm.collectionVariables.set(\"messageId\", pm.collectionVariables.get(\"messageId\") - 1);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/messages/{{messageId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"messages",
										"{{messageId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET all messages after delete - XML",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is XML\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/xml\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body is valid XML data\", function () {\r",
											"    pm.expect(() => xml2Json(responseBody)).to.not.throw();\r",
											"});\r",
											"\r",
											"pm.test(\"Body does not contain message id\", function () {\r",
											"    pm.expect(pm.response.text()).not.to.include(pm.collectionVariables.get(\"messageUrl\"));\r",
											"});\r",
											"\r",
											"postman.setNextRequest(\"Delete member - XML\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/messages",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"messages"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "{{localUrl}}",
			"type": "default"
		},
		{
			"key": "localUrl",
			"value": "http://localhost:8080/chatons_war_exploded",
			"type": "default"
		},
		{
			"key": "vmTomcatUrl",
			"value": "http://{{ipVm}}:8080/v3",
			"type": "default"
		},
		{
			"key": "vmNginxUrl",
			"value": "https://{{ipVm}}/api/v3",
			"type": "default"
		},
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "userId",
			"value": ""
		},
		{
			"key": "userPassword",
			"value": ""
		},
		{
			"key": "userName",
			"value": ""
		},
		{
			"key": "salonName",
			"value": ""
		},
		{
			"key": "salonUrl",
			"value": ""
		},
		{
			"key": "salonId",
			"value": ""
		},
		{
			"key": "salonMember",
			"value": ""
		},
		{
			"key": "messageText",
			"value": ""
		},
		{
			"key": "messageUrl",
			"value": ""
		},
		{
			"key": "messageId",
			"value": ""
		},
		{
			"key": "userUrl",
			"value": "",
			"type": "default"
		}
	]
}