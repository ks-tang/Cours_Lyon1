
                                                                                                                                        QUERY PLAN



 Sort  (cost=13215840.35..13215840.71 rows=145 width=564) (actual time=220016.919..220016.936 rows=101 loops=1)
   Output: d.dep, d.nom, (count(*)), (justify_interval((((avg(p.duree_vie))::text || ' days'::text))::interval))
   Sort Key: (justify_interval((((avg(p.duree_vie))::text || ' days'::text))::interval)) DESC, d.dep
   Sort Method: quicksort  Memory: 33kB
   Buffers: shared hit=544 read=325662, temp written=141133
   CTE personnes
     ->  Seq Scan on public.personne_insee_large  (cost=0.00..13109819.37 rows=2768513 width=93) (actual time=247.342..194275.938 rows=24826829 loops=1)
           Output: personne_insee_large.nomprenom, CASE WHEN (SUBSTRING(personne_insee_large.lieunaiss FROM 1 FOR 2) = '97'::text) THEN SUBSTRING(personne_insee_large.lieunaiss FROM 1 FOR 3) ELSE SUBSTRING(personne_insee_large.lieunaiss FROM 1 FOR 2) END, CASE WHEN (SUBSTRING(personne_insee_large.lieudeces FROM 1 FOR 2) = '97'::text) THEN SUBSTRING(personne_insee_large.lieudeces FROM 1 FOR 3) ELSE SUBSTRING(personne_insee_large.lieudeces FROM 1 FOR 2) END, (to_date((personne_insee_large.datedeces)::text, 'YYYYMMDD'::text) - to_date((personne_insee_large.datenaiss)::text, 'YYYYMMDD'::text))
           Filter: (is_date((personne_insee_large.datenaiss)::text) AND is_date((personne_insee_large.datedeces)::text))
           Rows Removed by Filter: 89840
           Buffers: shared hit=544 read=325662
   ->  HashAggregate  (cost=106011.79..106015.77 rows=145 width=564) (actual time=220016.752..220016.834 rows=101 loops=1)
         Output: d.dep, d.nom, count(*), justify_interval((((avg(p.duree_vie))::text || ' days'::text))::interval)
         Group Key: d.dep, d.nom
         Batches: 1  Memory Usage: 64kB
         Buffers: shared hit=544 read=325662, temp written=141133
         ->  Hash Join  (cost=116.16..85940.07 rows=2007172 width=544) (actual time=250.418..214218.531 rows=22694142 loops=1)
               Output: d.dep, d.nom, p.duree_vie
               Hash Cond: (p.dep_naissance = (d.dep)::text)
               Buffers: shared hit=544 read=325662, temp written=141133
               ->  CTE Scan on personnes p  (cost=0.00..55370.26 rows=2768513 width=36) (actual time=247.347..207581.836 rows=24826829 loops=1)
                     Output: p.nomprenom, p.dep_naissance, p.dep_deces, p.duree_vie
                     Buffers: shared hit=544 read=325662, temp written=141133
               ->  Hash  (cost=114.35..114.35 rows=145 width=540) (actual time=3.043..3.048 rows=101 loops=1)
                     Output: d.dep, d.nom
                     Buckets: 1024  Batches: 1  Memory Usage: 13kB
                     ->  Foreign Scan on public.departement d  (cost=100.00..114.35 rows=145 width=540) (actual time=2.630..3.024 rows=101 loops=1)
                           Output: d.dep, d.nom
                           Remote SQL: SELECT dep, nom FROM public.departement
 Planning:
   Buffers: shared hit=1
 Planning Time: 0.658 ms
 JIT:
   Functions: 19
   Options: Inlining true, Optimization true, Expressions true, Deforming true
   Timing: Generation 5.344 ms, Inlining 24.602 ms, Optimization 140.974 ms, Emission 81.834 ms, Total 252.755 ms
 Execution Time: 220257.866 ms
(37 rows)